<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>嗨害嗨</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-04-23T12:18:40.700Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Demo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>t</title>
    <link href="http://example.com/2022/04/23/t/"/>
    <id>http://example.com/2022/04/23/t/</id>
    <published>2022-04-23T07:31:12.000Z</published>
    <updated>2022-04-23T12:18:40.700Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231531011.png" alt="image-20220423153120950"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;

&lt;p&gt;&lt;img src=&quot;https://gitee.com/demo_oo/figure-picgo/raw/master/202204231531011.png&quot; alt=&quot;imag</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/04/23/hello-world/"/>
    <id>http://example.com/2022/04/23/hello-world/</id>
    <published>2022-04-23T02:29:10.865Z</published>
    <updated>2022-04-23T02:29:10.865Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>数据结构</title>
    <link href="http://example.com/2022/01/22/%E6%9C%AC%E5%9C%B0%E5%9B%BE/"/>
    <id>http://example.com/2022/01/22/%E6%9C%AC%E5%9C%B0%E5%9B%BE/</id>
    <published>2022-01-22T10:21:33.000Z</published>
    <updated>2022-04-23T09:52:48.254Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><p>具有<strong>相同数据类型</strong>的n个 数据元素的<strong>有限</strong>序列。</p><p>n为表长，n&#x3D;0时线性表是空表</p><p><img src="/images/image-20220110221153030.png" alt="image-20220110221153030"></p><p><strong>linear list</strong></p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">InitList(&amp;L)</span><br><span class="line"></span><br><span class="line">DestoryList(&amp;L)</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">ListInsert(&amp;L,i,e)</span><br><span class="line"></span><br><span class="line">ListDelete(&amp;L,i,&amp;e)</span><br><span class="line"><span class="comment">//删除表L中第i个位置的元素，并用e返回删除元素的值</span></span><br><span class="line"></span><br><span class="line">LocateElem(L,e)</span><br><span class="line"><span class="comment">//按照值来进行查找</span></span><br><span class="line"></span><br><span class="line">GetElem(L,i)</span><br><span class="line"><span class="comment">//按位查找操作</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">//其他的</span></span><br><span class="line">Length(L)</span><br><span class="line">PrintList(L)</span><br><span class="line">Empty(L)</span><br></pre></td></tr></table></figure><p>对修改结果需要带回来，要加入对参数的引用  <strong>&amp;</strong></p><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><p>（用顺序存储来实现的 线性表）</p><p><strong>顺序存储</strong>：逻辑上相邻的元素，在物理位置上也相邻</p><p>一个整数  int    4B  4个字节</p><h4 id="顺序表的定义"><a href="#顺序表的定义" class="headerlink" title="顺序表的定义"></a>顺序表的定义</h4><h5 id="静态分配"><a href="#静态分配" class="headerlink" title="静态分配"></a>静态分配</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="type">int</span> data[MaxSize];</span><br><span class="line"><span class="type">int</span> Length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">initList</span><span class="params">(SqList&amp; L)</span> &#123;</span><br><span class="line">L.Length = <span class="number">0</span>;<span class="comment">//初始化 长度为0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MaxSize; i++)</span><br><span class="line">&#123;</span><br><span class="line">L.data[i] = i;</span><br><span class="line">L.Length++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>先规定了数组的大小，不能变化。</p><h5 id="动态分配"><a href="#动态分配" class="headerlink" title="动态分配"></a>动态分配</h5><p>​<strong>malloc</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L.data = (ElemType*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ElemType)*InitSize);</span><br></pre></td></tr></table></figure><p>申请一片连续存储空间，并返回一个指向内存首部的指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="type">int</span>* data;   <span class="comment">//指向动态分配的指针</span></span><br><span class="line"><span class="type">int</span> MaxSize;<span class="comment">//顺序表最大容量</span></span><br><span class="line"><span class="type">int</span> length;<span class="comment">//当前有数据元素的长度</span></span><br><span class="line">&#125;SeqList;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">initlist</span><span class="params">(SeqList&amp; l)</span> &#123;</span><br><span class="line">l.data = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * InitSize);</span><br><span class="line">l.length = <span class="number">0</span>;</span><br><span class="line">l.MaxSize = InitSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">IncreaseSize</span><span class="params">(SeqList&amp; L, <span class="type">int</span> len)</span> &#123;<span class="comment">//动态增加表的长度</span></span><br><span class="line"><span class="type">int</span>* p = L.data;</span><br><span class="line">L.data = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * (L.MaxSize + len));</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; L.length; i++)</span><br><span class="line">L.data[i] = p[i];</span><br><span class="line">L.MaxSize = L.MaxSize + len;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">SeqList L;</span><br><span class="line">initlist(L);</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">IncreaseSize(L, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul><li>随机访问 O（1）可以找到元素</li><li>插入移动元素不方便</li><li>存储密度高 ，每个节点只存储数据元素</li><li>拓展容量不方便</li></ul><p><img src="/images/image-20220111110822120.png" alt="image-20220111110822120"></p><h4 id="顺序表的插入删除"><a href="#顺序表的插入删除" class="headerlink" title="顺序表的插入删除"></a>顺序表的插入删除</h4><h5 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">ListInsert</span><span class="params">(sqlist&amp; L, <span class="type">int</span> i, <span class="type">int</span> e)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = L.length; j &gt;= i; j--)&#123;</span><br><span class="line">L.data[j] = L.data[j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">L.data[i - <span class="number">1</span>] = e;</span><br><span class="line">L.length++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//增加了健壮性   多了几个判断的操作 </span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">ListInsert</span><span class="params">(sqlist&amp; L, <span class="type">int</span> i, <span class="type">int</span> e)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;i||i&gt;L.length+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(L.length&gt;=MaxSize)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = L.length; j &gt;= i; j--)&#123;</span><br><span class="line">L.data[j] = L.data[j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">L.data[i - <span class="number">1</span>] = e;</span><br><span class="line">L.length++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最好情况 O（1）</p><p>最差情况O（n）</p><p>平均情况<br>$$<br>\frac{1}{n+1}*(1+2+…+n)&#x3D; \<br>\frac{(1+n)*n}{2}*\frac{1}{n+1}&#x3D;\<br>\frac{n}{2}<br>$$</p><p><img src="/images/image-20220111131809457.png" alt="image-20220111131809457"></p><h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">ListDelete</span><span class="params">(Sqlist &amp;L,<span class="type">int</span> i,<span class="type">int</span> &amp;e)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;L.length)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">e=L.data[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;L.length;j++)</span><br><span class="line">L.data[j<span class="number">-1</span>]=L.data[j];</span><br><span class="line">L.length--;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  e 用了引用</span></span><br></pre></td></tr></table></figure><p>最好情况 O(1)</p><p>最差情况O(n)</p><p>平均<br>$$<br>\frac{1}{n}*(1+2+…+n-1)&#x3D; \<br>\frac{(n-1)*n}{2}*\frac{1}{n}&#x3D;\<br>\frac{n-1}{2}<br>$$<br><img src="/images/image-20220111132307171.png" alt="image-20220111132307171"></p><p><img src="/images/image-20220111132336073.png" alt="image-20220111132336073"></p><h4 id="顺序表的查找"><a href="#顺序表的查找" class="headerlink" title="顺序表的查找"></a>顺序表的查找</h4><h5 id="按位查找"><a href="#按位查找" class="headerlink" title="按位查找"></a>按位查找</h5><p>静态分配</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ElemType <span class="title function_">GetElem</span><span class="params">(Sqlist L,<span class="type">int</span> i)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> L.data[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动态分配</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//是一样的</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="type">int</span> data[maxsize];</span><br><span class="line"><span class="type">int</span> length;</span><br><span class="line">&#125;sqlist;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="type">int</span>* data;   <span class="comment">//指向动态分配的指针</span></span><br><span class="line"><span class="type">int</span> MaxSize;<span class="comment">//顺序表最大容量</span></span><br><span class="line"><span class="type">int</span> length;<span class="comment">//当前有数据元素的长度</span></span><br><span class="line">&#125;SeqList;</span><br></pre></td></tr></table></figure><p>时间复杂度 O(1)</p><p>随机存取的特性，连续存放，类型一致</p><h5 id="按值查找"><a href="#按值查找" class="headerlink" title="按值查找"></a>按值查找</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">LocateElem</span><span class="params">(SeqList L,<span class="type">int</span> e)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)</span><br><span class="line"><span class="keyword">if</span>(L.data[i]==e)</span><br><span class="line"><span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查找的 时间复杂度</p><p>最好情况：O（1）</p><p>最差情况：O（n）</p><p>平均情况：<br>$$<br>\frac{1}{n}*(1+2+…+n)&#x3D; \<br>\frac{(n+1)*n}{2}*\frac{1}{n}&#x3D;\<br>\frac{n+1}{2}<br>$$<br><img src="/images/image-20220111133536860.png" alt="image-20220111133536860"></p><h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><ul><li>不要求大片空间 改变容量方便</li><li>不支持随机存取</li></ul><h4 id="单链表定义"><a href="#单链表定义" class="headerlink" title="单链表定义"></a>单链表定义</h4><p>typedef  &lt;数据类型&gt; &lt;别名&gt;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">Elemdata data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>  *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode,*LinkList;</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">Elemdata data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>  *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> <span class="title">LNode</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">LinkList</span>;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>不带头节点的单链表</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">InitList</span><span class="params">(LinkList &amp;L)</span>&#123;</span><br><span class="line">L = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//空表，暂时还没有任何节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>带头结点的单链表</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">InitList</span><span class="params">(LinkList &amp;L)</span>&#123;</span><br><span class="line">L=(LNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line"><span class="comment">//分配一个头节点</span></span><br><span class="line"><span class="keyword">if</span>(L==<span class="literal">NULL</span>)<span class="comment">//分配失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/image-20220111135118882.png" alt="image-20220111135118882"></p><p>总结</p><p><img src="/images/image-20220111135144982.png" alt="image-20220111135144982"></p><h3 id="链表的操作"><a href="#链表的操作" class="headerlink" title="链表的操作"></a>链表的操作</h3><h4 id="插入-1"><a href="#插入-1" class="headerlink" title="插入"></a>插入</h4><p><em>按照位置</em></p><p><strong>带头结点</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">ListInsert</span><span class="params">(LinkList &amp;L,<span class="type">int</span> i,ElemType e)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *p;</span><br><span class="line">    <span class="type">int</span> j=<span class="number">0</span>;<span class="comment">//此时p指向的链表中的第几项</span></span><br><span class="line">    p=L;    <span class="comment">//一开始指向头节点</span></span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;j&lt;i<span class="number">-1</span>)&#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;       <span class="comment">//整一个循环，使p指向第i-1个结点</span></span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>) <span class="comment">//i值不合法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *s = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    </span><br><span class="line">    s-&gt;data=e;</span><br><span class="line">    s-&gt;next=p-&gt;next;</span><br><span class="line">    p-&gt;next=s;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/image-20220111152734939.png" alt="image-20220111152734939"></p><p><strong>不带头节点的后插</strong></p><p>此时第一个节点是有数据的</p><p>要分情况</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i==<span class="number">1</span>)&#123;</span><br><span class="line">    LNode *s=(LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    s-&gt;data=e;</span><br><span class="line">    s-&gt;next=L;</span><br><span class="line">    L=s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    LNode *p;</span><br><span class="line">    <span class="type">int</span> j=<span class="number">1</span>;</span><br><span class="line">    p=L;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;j&lt;i<span class="number">-1</span>)&#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *s=(LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    </span><br><span class="line">    s-&gt;data=e;</span><br><span class="line">    s-&gt;next=p-&gt;next;</span><br><span class="line">    p-&gt;next=s;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>指定节点的前插操作</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">InsertPriorNode</span><span class="params">(LNode *p,ElemType e)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *s=(LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    s-&gt;next=p-&gt;next;</span><br><span class="line">    p-&gt;next=s;<span class="comment">//将新节点s连在p之后</span></span><br><span class="line">    s-&gt;data=p-&gt;data;  <span class="comment">//p原来的值赋给s</span></span><br><span class="line">    p-&gt;data=e;<span class="comment">//把要添加的值给p</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h4><p><strong>按照位序删除</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LinkDelete</span><span class="params">(LinkList &amp;L,<span class="type">int</span> i,ElemType &amp;e)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i&lt;<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *p;</span><br><span class="line">    <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">    p=L;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;j&lt;i<span class="number">-1</span>)&#123;</span><br><span class="line">        j++;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)   <span class="comment">//i值不合法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;next==<span class="literal">NULL</span>)  <span class="comment">//第i-1个结点之后没有节点了</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *q=p-&gt;next;</span><br><span class="line">    e=q-&gt;data;</span><br><span class="line">    p-&gt;next=q-&gt;next;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">free</span>(q)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>删除指定节点</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前提是 要删除的不是最后一个节点。</span></span><br><span class="line"><span class="comment">//否则就要从头开始求了</span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">DeleteNode</span><span class="params">(LNode *p)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *q=p-&gt;next;<span class="comment">//借助了一个中继节点</span></span><br><span class="line">    p-&gt;data=q-&gt;data;<span class="comment">//</span></span><br><span class="line">    p-&gt;next=q-&gt;next;<span class="comment">//把*q从链中断开</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">free</span>(q)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><p><strong>位置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">LNode *<span class="title function_">GetElem</span><span class="params">(LinkList L,<span class="type">int</span> i)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    LNode *p;</span><br><span class="line">    <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">    p=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; j&lt;i<span class="number">-1</span>)&#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>值</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LNode * <span class="title function_">LocateElem</span><span class="params">(LinkList L,ElemType e)</span>&#123;</span><br><span class="line">LNode *p = L-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; p-&gt;data!=e)</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="建立"><a href="#建立" class="headerlink" title="建立"></a>建立</h4><ul><li>初始化一个链表</li><li>每次取一个数据元素，插入到尾部或头部</li></ul><p><strong>尾插法</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">LinkList <span class="title function_">List_Tailinsert</span><span class="params">(LinkList &amp;L)</span>&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    L=(LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode)); <span class="comment">//建立头节点</span></span><br><span class="line">    LNode *s,*r=L;<span class="comment">//r为表尾指针</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123;</span><br><span class="line">        s=(LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">        </span><br><span class="line">        s-&gt;data=x;</span><br><span class="line">        r-&gt;next=s;</span><br><span class="line">        r=s;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    r-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>头插法</strong>(带头节点)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">LinkList <span class="title function_">List_HeadInsert</span><span class="params">(LinkList &amp;L)</span>&#123;</span><br><span class="line">    LNode *s;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    L=(LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123;</span><br><span class="line">    s=(LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">        s-&gt;data=x;</span><br><span class="line">        s-&gt;next=L-&gt;next;</span><br><span class="line">        L-&gt;next=s;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span>&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span> *<span class="title">prior</span>,*<span class="title">next</span>;</span></span><br><span class="line">&#125;DNode,*DLinkList;</span><br></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="**初始化 **"></a>**初始化 **</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">InitDLinkList</span><span class="params">(DLinkList &amp;L)</span>&#123;</span><br><span class="line">    L=(DNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DNode));</span><br><span class="line">    <span class="keyword">if</span>(L==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    L-&gt;prior=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    DLinkList L;</span><br><span class="line">    InitDLinkList(L);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/image-20220112123356508.png" alt="image-20220112123356508"></p><p><strong>p节点后插入s结点</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">InsertNextDNode</span><span class="params">(DNode *p,Dnode *s)</span>&#123;</span><br><span class="line">    s-&gt;next=p-&gt;next; <span class="comment">//</span></span><br><span class="line">    s-&gt;prior=p;</span><br><span class="line">    p-&gt;next-&gt;poior=s;</span><br><span class="line">    p-&gt;next=s</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> InsertNextDNode(DNode *p,Dnode *s)&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>||s==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    s-&gt;next=p-&gt;next; <span class="comment">//</span></span><br><span class="line">    <span class="keyword">if</span> (p-&gt;next!=<span class="literal">NULL</span>)<span class="comment">//如果p之后又有后继节点</span></span><br><span class="line">         p-&gt;next-&gt;poior=s;</span><br><span class="line">    </span><br><span class="line">    s-&gt;prior=p;</span><br><span class="line">    p-&gt;next=s;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/image-20220112131556592.png" alt="image-20220112131556592"></p><p><img src="/images/image-20220112132505297.png" alt="image-20220112132505297"></p><h3 id="删除-2"><a href="#删除-2" class="headerlink" title="删除"></a>删除</h3><p>删除p的后继节点</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">DeleteNextDNode</span><span class="params">(DNode *p)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>||p-&gt;next==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    DNode *q=p-&gt;next;</span><br><span class="line">    p-&gt;next=q-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(q-&gt;next!=<span class="literal">NULL</span>)<span class="comment">//  删的不是最后一个结点</span></span><br><span class="line">    q-&gt;next-&gt;poior=p;</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/image-20220112133313926.png" alt="image-20220112133313926"></p><h2 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h2><h3 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode,LinkList;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">InitLinkList</span><span class="params">(&amp;L)</span>&#123;</span><br><span class="line">    L=(LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    <span class="keyword">if</span>(L==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    L-&gt;next=L;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>循环双链表</strong></p><p><img src="/images/image-20220112134230784.png" alt="image-20220112134230784"></p><h2 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h2><p>分配一整片连续的内存空间，各个结点集中安置。</p><p><img src="/images/image-20220112134604670.png" alt="image-20220112134604670"></p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10 <span class="comment">//最大长度</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="type">int</span> next;   <span class="comment">//下一个元素的下标</span></span><br><span class="line">&#125;SLinkList[MaxSize];</span><br></pre></td></tr></table></figure><p><img src="/images/image-20220112152155459.png" alt="image-20220112152155459"></p><p> 右边是 下一个的位置</p><p><img src="/images/image-20220112152614933.png" alt="image-20220112152614933"></p><h2 id="顺序表-amp-链表"><a href="#顺序表-amp-链表" class="headerlink" title="顺序表&amp;链表"></a>顺序表&amp;链表</h2><ul><li><p>都是线性表，线性结构</p></li><li><p>顺序表：顺序存储</p><ul><li>随机存取，密度高（只存数据），</li><li>要求一块连续的空间。</li></ul></li><li><p>链表：链式存储</p><ul><li>离散的小空间，分配方便</li><li>改变容量方便，不能随机存取，</li><li>有指针，存储密度低。</li></ul></li></ul><p><strong>操作</strong></p><ul><li>创建&amp;销毁<ul><li>顺序表：分配大片空间<ul><li>静态\动态</li></ul></li><li>链表：分配一个头节点\头指针</li></ul></li></ul><p><img src="/images/image-20220112153455037.png" alt="image-20220112153455037"></p><ul><li><p><strong>增删</strong>改<strong>查</strong></p></li><li><p>增</p><ul><li>顺序表：插入\删除时，所以元素都要移动O（n）</li><li>链表：只需要修改真正的结点O(n)</li></ul><p><img src="/images/image-20220112153823152.png" alt="image-20220112153823152"></p></li></ul><h1 id="栈-队列"><a href="#栈-队列" class="headerlink" title="栈 队列"></a>栈 队列</h1><p>  只允许在一端进行插入或删除操作的 <strong>线性表</strong></p><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>后进先出（LIFO）</p><h3 id="基本操作-1"><a href="#基本操作-1" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">InitStack(&amp;S) </span><br><span class="line">DestroyStack(&amp;L)</span><br><span class="line"></span><br><span class="line">Push(&amp;S,x)</span><br><span class="line">Pop(&amp;S,&amp;x)</span><br><span class="line">    </span><br><span class="line">GetTop(S,&amp;x)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>$$<br>n个不同的元素进栈，那么合法的出栈顺序\frac{1}{n+1}*C_{2n}^{n}<br>$$</p><h3 id="顺序栈"><a href="#顺序栈" class="headerlink" title="顺序栈"></a>顺序栈</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">ElemType data[MaxSize];</span><br><span class="line"><span class="type">int</span> top;</span><br><span class="line">&#125;Sqstack;</span><br></pre></td></tr></table></figure><h4 id="初始化-2"><a href="#初始化-2" class="headerlink" title="初始化"></a><strong>初始化</strong></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">InitStack</span><span class="params">(SqStack &amp;S)</span>&#123;</span><br><span class="line"><span class="type">int</span> top=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="进栈"><a href="#进栈" class="headerlink" title="进栈"></a><strong>进栈</strong></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">Push</span><span class="params">(SqStack &amp;S,ElemType e)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top==MaxSize<span class="number">-1</span>)<span class="comment">//栈满 报错</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">S.top++;           <span class="comment">//指针++</span></span><br><span class="line">S.data[S.top]=e;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/image-20220112161318695.png" alt="image-20220112161318695"></p><h4 id="出栈"><a href="#出栈" class="headerlink" title="出栈"></a><strong>出栈</strong></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">Pop</span><span class="params">(SqStack &amp;S,ElemType &amp;x)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S.top==<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    x=S.data[S.top];</span><br><span class="line">    S.top--;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <img src="/images/image-20220112161621264.png" alt="image-20220112161621264"></p><h4 id="读元素"><a href="#读元素" class="headerlink" title="读元素"></a>读元素</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">GetTop</span><span class="params">(SqStack S,ElemType &amp;x)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(S.top==<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">x=S.data[S.top];</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="共享栈"><a href="#共享栈" class="headerlink" title="共享栈"></a>共享栈</h4><p><img src="/images/image-20220112162137766.png" alt="image-20220112162137766"></p><h3 id="链栈"><a href="#链栈" class="headerlink" title="链栈"></a>链栈</h3><p>用链式存储方式整的栈</p><p><strong>定义</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;*LiStack;</span><br></pre></td></tr></table></figure><h4 id="进栈-1"><a href="#进栈-1" class="headerlink" title="进栈"></a>进栈</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">Pop</span><span class="params">(LiStack &amp;S,Elemtype x)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(S=<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LinkNode *q=(LiStack*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LiStack));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(q==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    q-&gt;data=x;</span><br><span class="line">    q-&gt;next=S-&gt;next;</span><br><span class="line">    s-&gt;next=q;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;  <span class="comment">//有头节点</span></span><br></pre></td></tr></table></figure><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>只允许在一端进行插入，在另一端删除的线性表</p><p>先进先出（FIFO）</p><p><strong>基本操作</strong></p><p><img src="/images/image-20220112164920856.png" alt="image-20220112164920856"></p><h3 id="顺序队列"><a href="#顺序队列" class="headerlink" title="顺序队列"></a>顺序队列</h3><h4 id="初始化-3"><a href="#初始化-3" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">ElemType data[MaxSize];</span><br><span class="line"><span class="type">int</span> front,rear;  <span class="comment">//队头指针和队尾指针</span></span><br><span class="line">&#125;SqQueue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitQueue</span><span class="params">(SqQueue &amp;Q)</span>&#123;</span><br><span class="line">    Q.rear=<span class="number">0</span>;</span><br><span class="line">    Q.front=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="入队"><a href="#入队" class="headerlink" title="入队"></a>入队</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">EnQueue</span><span class="params">(SqQueue &amp;Q,ElemType x)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>( (Q.rear+<span class="number">1</span>)%MaxSize == Q.front)<span class="comment">//队满</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">Q.data[Q.rear]=x;</span><br><span class="line">Q.rear=(Q.rear+<span class="number">1</span>)%MaxSize;   <span class="comment">//队尾指针加一取模</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="出队"><a href="#出队" class="headerlink" title="出队"></a>出队</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">DnQueue</span><span class="params">(SqQueue &amp;Q,ElemType &amp;x)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>( Q.rear == Q.front)<span class="comment">//对空</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">x=Q.data[Q.front];</span><br><span class="line">Q.front=(Q.front+<span class="number">1</span>)%MaxSize;   <span class="comment">//队尾指针加一取模</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算队列中数据</p><p>牺牲一个数据<br>$$<br>（rear+MaxSize-front）% MaxSize<br>$$<br><img src="/images/image-20220112185012050.png" alt="image-20220112185012050"></p><p><strong>方式二：</strong>结构体多了个  size</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">ElemType data[MaxSize];</span><br><span class="line"><span class="type">int</span> front,rear;</span><br><span class="line"><span class="type">int</span> size;  <span class="comment">//表示当前队列长度</span></span><br><span class="line">&#125;SeQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">ElemType data[MaxSize];</span><br><span class="line"><span class="type">int</span> front,rear;</span><br><span class="line"><span class="type">int</span> tag;  <span class="comment">//0表示当前删除成功，1表示当前插入成功</span></span><br><span class="line">&#125;SeQueue;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>方案三</strong> 加入tag</p><p><img src="/images/image-20220112185333098.png" alt="image-20220112185333098"></p><h3 id="链式队列"><a href="#链式队列" class="headerlink" title="链式队列"></a>链式队列</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LinkNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    LinkNode *front,*rear;</span><br><span class="line">&#125;LinkQueue;</span><br></pre></td></tr></table></figure><h3 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h3><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="括号匹配"><a href="#括号匹配" class="headerlink" title="括号匹配"></a>括号匹配</h3><p>从左往右 一次扫描</p><p>遇到左括号就 入栈，遇到右括号就弹出栈中的其中一个与之匹配</p><p><img src="/images/image-20220123213052021.png" alt="image-20220123213052021"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">bracketCheck</span><span class="params">(<span class="type">char</span> str[],<span class="type">int</span> length)</span>&#123;</span><br><span class="line">    SqlStack S;</span><br><span class="line">    InitStack(S);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;length;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">&quot;(&quot;</span>||str[i]==<span class="string">&quot;[]&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Push(S,str[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(Empty(S))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="type">char</span> topElem;</span><br><span class="line">            Pop(S,topElem);</span><br><span class="line">            <span class="keyword">if</span>(str[i]!=topElem)<span class="comment">//要用字符串相等的函数</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;    </span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Empty(S);</span><br><span class="line">    </span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="表达式求值"><a href="#表达式求值" class="headerlink" title="表达式求值"></a>表达式求值</h3><ul><li>运算符在操作符的位置 <ul><li>前缀、中缀、后缀</li></ul></li></ul><p>后缀：左优先</p><p>前缀：右优先</p><p><strong>计算</strong></p><p>栈实现后缀表达式</p><ul><li>从左往右依次扫描，直到扫描完所有的</li><li>扫描到操作数就压入栈，回到1，否则到3</li><li>扫描到运算符，弹出两个栈顶元素进行计算，运算结果压入栈，回到1</li></ul><p>栈实现前缀表达式</p><ul><li>从右往左依次扫描，直到扫描完所有的</li><li>扫描到操作数就压入栈，回到1，否则到3</li><li>扫描到运算符，弹出两个栈顶元素进行计算，运算结果压入栈，回到1</li></ul><p><strong>转化</strong></p><h3 id="函数递归"><a href="#函数递归" class="headerlink" title="函数递归"></a>函数递归</h3><h3 id="队列应用"><a href="#队列应用" class="headerlink" title="队列应用"></a>队列应用</h3><h1 id="串"><a href="#串" class="headerlink" title="串"></a>串</h1><p>字符串：由零个或多个字符组成的有限序列。</p><p>一般记作<br>$$<br>S&#x3D;’a_1a_2a_3···’<br>$$<br>从1开始</p><p><strong>基本操作</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">StrAssign(&amp;T,chars) <span class="comment">//赋值操作</span></span><br><span class="line">StrCopy(&amp;T,S)<span class="comment">//串S复制得到T</span></span><br><span class="line">StrEmpty(S)</span><br><span class="line">StrLength(S)</span><br><span class="line">ClearString(&amp;S)<span class="comment">//清空字符串</span></span><br><span class="line">DestoryString(&amp;S)<span class="comment">//销毁串，回收存储空间</span></span><br><span class="line">ConCat(&amp;T,S1,S2)<span class="comment">//串链接，由T返回S1，S2组成的新串</span></span><br><span class="line">    </span><br><span class="line">SubString(&amp;Sub,S,pos,len) <span class="comment">//求字串</span></span><br><span class="line">Index(S,T)<span class="comment">//看T在S的第一次出现的位置</span></span><br><span class="line"></span><br><span class="line">StrCompare(S,T)<span class="comment">//比较操作，字典排序</span></span><br></pre></td></tr></table></figure><h2 id="顺序存储"><a href="#顺序存储" class="headerlink" title="顺序存储"></a>顺序存储</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAXLEN 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> ch[MAXLEN];</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">&#125;SString;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>求字串</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">SubString</span><span class="params">(SString &amp;Sub,SString S,<span class="type">int</span> pos,<span class="type">int</span> len)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(pos+len<span class="number">-1</span>)&gt;S.length</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=pos;i&lt;pos+len<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        Sub.ch[i-pos+<span class="number">1</span>] = S.ch[i];</span><br><span class="line">    &#125;</span><br><span class="line">    Subs.len = len;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>比较大小</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">StrCompare</span><span class="params">(SString S,SSTring T)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=S.length &amp;&amp; i&lt;=T.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(S.ch[i]!=T.ch[i])</span><br><span class="line">            <span class="keyword">return</span> S.ch[i] - T.ch[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> S.length - T.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>定位</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Index</span><span class="params">(SString S,SString T)</span>&#123;</span><br><span class="line"><span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> n=StrLength(S);</span><br><span class="line">    <span class="type">int</span> m=StrLength(T);</span><br><span class="line">    SStringsub;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=n-m+<span class="number">1</span>)&#123;</span><br><span class="line">        SubString(sub,S,i,m);</span><br><span class="line">        <span class="keyword">if</span>(StrCompare(sub,T)!=<span class="number">0</span>)</span><br><span class="line">            ++i;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="匹配"><a href="#匹配" class="headerlink" title="匹配"></a>匹配</h2><h3 id="朴素模式匹配算法"><a href="#朴素模式匹配算法" class="headerlink" title="朴素模式匹配算法"></a>朴素模式匹配算法</h3><p>O(m*n)</p><p>匹配 n-m+1个 字串</p><p>一个个 比较</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Index</span><span class="params">(SString S,SString T)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">1</span>,j=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=S.length&amp;&amp;j&lt;=T.length)&#123;</span><br><span class="line">        <span class="keyword">if</span>(S.ch[i]==T.ch[j])</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            i=i-j+<span class="number">2</span>;</span><br><span class="line">            j=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j&gt;T.length)</span><br><span class="line">        <span class="keyword">return</span> i-T.length;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双index</p><p>退出条件，子串index大于其长度。</p><h3 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h3><p>O(m+n)</p><p><img src="/images/image-20220125103338627.png" alt="image-20220125103338627"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Index_KMP</span><span class="params">(SString S,SString T,<span class="type">int</span> next[])</span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">1</span>,j=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=S.length&amp;&amp;j&lt;=T.length)&#123;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">0</span>||S.ch[i]==T.ch[i])&#123;</span><br><span class="line">            ++i;++j;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            j=next[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j&gt;T.length)</span><br><span class="line">        <span class="keyword">return</span> i-T.length;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主子串指针 不回溯</p><p><strong>求next 数组</strong></p><p><img src="/images/image-20220407152220260.png" alt="image-20220407152220260"></p><p>get_next</p><p>伪代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">get_next</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">1</span>,j=<span class="number">0</span>;</span><br><span class="line">    next[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;s.length)&#123;</span><br><span class="line">        <span class="keyword">if</span>&#123;(j==<span class="number">0</span>||s[i]==s[j])&#123;</span><br><span class="line">            ++i;</span><br><span class="line">            ++j;</span><br><span class="line">            next[i]=j;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">           <span class="keyword">else</span>&#123;</span><br><span class="line">               j=next[j];</span><br><span class="line">           &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><h2 id="常考性质"><a href="#常考性质" class="headerlink" title="常考性质"></a>常考性质</h2><ul><li><p>$$<br>节点数&#x3D;总度数+1<br>$$</p></li><li><p>$$<br>度为m的树第i层最多有m^(i-1)个结点<br>$$</p></li><li><p>$$<br>高为h的m叉树最多有\frac{m^h-1}{m-1}个结点<br>$$</p></li><li><p>$$<br>具有n个结点的m叉树最小高度为\lceil log_m(n(m-1)+1) \rceil<br>$$</p></li></ul><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><ul><li>每个结点最多两个子树</li><li>左右子树不能颠倒</li><li>有序树</li></ul><h3 id="特殊二叉树"><a href="#特殊二叉树" class="headerlink" title="特殊二叉树"></a>特殊二叉树</h3><p><img src="/images/image-20220125150247498.png" alt="image-20220125150247498"></p><p>  <strong>二叉排序树</strong></p><ul><li>左子树上<strong>所有</strong>节点小于根节点</li><li>右子树上<strong>所有</strong>节点大于根节点</li><li>左右子树各是一课二叉排序树</li></ul><p><strong>平衡二叉树</strong></p><p>  树上任一结点的左子树和右子树的深度之差不超过1。</p><h3 id="常考性质-1"><a href="#常考性质-1" class="headerlink" title="常考性质"></a>常考性质</h3><ul><li><p>$$<br>n_0&#x3D;n2+1<br>$$</p><p><img src="/images/image-20220125162347279.png" alt="image-20220125162347279"></p></li><li><p><img src="/images/image-20220125180917113.png" alt="image-20220125180917113"></p></li></ul><h3 id="顺序存储-1"><a href="#顺序存储-1" class="headerlink" title="顺序存储"></a>顺序存储</h3><p><strong>完全二叉树</strong></p><ul><li><p>i 的左孩子 2i</p></li><li><p>i 的右孩子 2i+1</p></li><li><p>i的父节点</p></li></ul><h3 id="链式存储"><a href="#链式存储" class="headerlink" title="链式存储"></a>链式存储</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span>&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">parent</span>;</span></span><br><span class="line">&#125;BiTNode,*BiTree;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/image-20220125193816761.png" alt="image-20220125193816761"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一棵空树</span></span><br><span class="line">BiTree root = <span class="literal">NULL</span>;</span><br><span class="line">root = (BiTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">root-&gt;data = &#123;<span class="number">1</span>&#125;;</span><br><span class="line">root-rchild = <span class="literal">NULL</span>;</span><br><span class="line">root-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">BiTNode *p =(BiTNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">p-&gt;data = &#123;<span class="number">2</span>&#125;</span><br><span class="line">p-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">p-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">root-&gt;lchild = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><h3 id="先中后遍历"><a href="#先中后遍历" class="headerlink" title="先中后遍历"></a>先中后遍历</h3><p><strong>先序</strong>：根左右</p><p><strong>中序</strong>：左根右</p><p><strong>后序</strong>：左右根</p><p><img src="/images/image-20220126212548102.png" alt="image-20220126212548102"></p><ul><li>先序<ul><li>A B D G E C F</li></ul></li><li>中序<ul><li>D G B E A F C</li></ul></li><li>后序<ul><li>G D E B F C A</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span>&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span></span><br><span class="line">&#125;BiTNode,*BiTree;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PreOrder</span><span class="params">(BiTree T)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        visit(T);</span><br><span class="line">        PreOrder(T-&gt;lchild);</span><br><span class="line">        PreOrder(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>从你的全世界路过法</strong></p><p>不全的补全，然后看路过的次数</p><p><img src="/images/image-20220126213738125.png" alt="image-20220126213738125"></p><p><strong>由遍历构造二叉树</strong></p><p>每个单独的都有歧义，</p><p>层次、先序、后序 任意一种 加上  <strong>中序</strong> 都可以完整确认一个 二叉树</p><h3 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a>层次遍历</h3><p>辅助队列</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LevelOrder</span><span class="params">(BiTree T)</span>&#123;</span><br><span class="line">LinkQueue Q;</span><br><span class="line">    InitQueue(Q);</span><br><span class="line">    BiTree p;</span><br><span class="line">    EnQueue(Q,T);</span><br><span class="line">    <span class="keyword">while</span>(!Empty(Q))&#123;</span><br><span class="line">        DeQueue(Q,p);</span><br><span class="line">        visit(p);</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;lchild!=<span class="literal">NULL</span>);</span><br><span class="line">        EnQueue(Q,p-&gt;lchild);</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;rchild!=<span class="literal">NULL</span>);</span><br><span class="line">        EnQueue(Q,p-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span></span><br><span class="line">&#125;BiTNode,*BiTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>&#123;</span></span><br><span class="line">    BiTNode *data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LinkNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    LInkNode *front,*rear;</span><br><span class="line">&#125;LinkQueue;</span><br></pre></td></tr></table></figure><h2 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h2><p>问题</p><ul><li>得从根结点开始遍历</li><li></li></ul><p><img src="/images/image-20220128170945148.png" alt="image-20220128170945148"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ThreadNode</span>&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ThreadNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span></span><br><span class="line">    <span class="type">int</span> ltag,rtag;</span><br><span class="line">&#125;ThreadNode,*ThreadTree;</span><br><span class="line">tag == <span class="number">0</span>;  <span class="comment">//指针指向孩子</span></span><br><span class="line">tag == <span class="number">1</span>;  <span class="comment">//指针指向线索（前驱or后继）</span></span><br></pre></td></tr></table></figure><ul><li>中序线索二叉树中找中序后继</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//找到 以p为根的子树中 第一个被中序遍历的结点</span></span><br><span class="line">ThreadNode *<span class="title function_">Firstnode</span><span class="params">(ThreadNode *p)</span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(p-&gt;ltag==<span class="number">0</span>)</span><br><span class="line">        p=p-&gt;lchild;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 找到p的后继节点</span></span><br><span class="line">ThreadNode *<span class="title function_">Nextnode</span><span class="params">(ThreadNode *p)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;rtag==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> Firstnode(p-&gt;rchild);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> p-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inorder</span><span class="params">(ThreadNode *T)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(ThreadNode *p=Firstnode(T);p!=<span class="literal">NULL</span>;p=Nextnode(p))</span><br><span class="line">    &#123;</span><br><span class="line">        visit(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找前驱，进行逆向中序遍历</p><p><img src="/images/image-20220128214012217.png" alt="image-20220128214012217"></p><h2 id="树の存储结构"><a href="#树の存储结构" class="headerlink" title="树の存储结构"></a>树の存储结构</h2><p><strong>双亲表示法</strong></p><p>每个节点保存指向父亲的“指针”</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_TREE_SIZE 100  <span class="comment">//最多节点数</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    ElemType data;     </span><br><span class="line">    <span class="type">int</span> parent;       <span class="comment">//双亲位置域</span></span><br><span class="line">&#125;PTNode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    PTNode nodes[MAX_TREE_SIZE];</span><br><span class="line">    <span class="type">int</span> n;  <span class="comment">//节点数</span></span><br><span class="line">&#125;PTree;</span><br></pre></td></tr></table></figure><p><img src="/images/image-20220129200919399.png" alt="image-20220129200919399"></p><ul><li>优点：查询指定节点的双亲更方便</li><li>缺点：指定节点的孩子指针只能从头遍历</li></ul><p><strong>孩子表示法</strong></p><p>顺序存储各个结点，每个节点保存孩子的链表头指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CTNode</span>&#123;</span></span><br><span class="line"><span class="type">int</span> child;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> *<span class="title">CTNode</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">CTNode</span> *<span class="title">firstChild</span>;</span></span><br><span class="line">&#125;CTBox;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    Ct</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="查找-1"><a href="#查找-1" class="headerlink" title="查找"></a>查找</h1><h2 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h2><p>查找长度</p><p>查找运算中，需要对比关键字的次数称为查找长度</p><p>ASL Average Search Length</p><p>所有查找过程中进行关键字的比较次数。</p><p>分查找成功和查找失败</p><h2 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h2><h2 id="折半查找"><a href="#折半查找" class="headerlink" title="折半查找"></a>折半查找</h2><p>有序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> right = L.length<span class="number">-1</span>;</span><br><span class="line"><span class="type">int</span> mid=(left+right)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span>(left&lt;=right)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(target&lt;L[mid])&#123;</span><br><span class="line">        right = mid<span class="number">-1</span>;</span><br><span class="line">        mid = (right+left)/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(target&gt;L[mid])&#123;</span><br><span class="line">        left = mid+<span class="number">1</span>;</span><br><span class="line">        mid = (right+left)/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(target==L[mid])</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/image-20220413154541862.png" alt="image-20220413154541862"></p><p><img src="/images/image-20220413154729954.png" alt="image-20220413154729954"></p><p>当前low和high有奇数个元素，mid分割后左右节点个数一样</p><p>low和high有偶数个元素，mid分割后，左边比右边少一个。</p><ul><li>折半查找的判定树是 平衡二叉树</li><li>平衡二叉排序树</li></ul><p>折半查找的ASL</p><h2 id="分块查找"><a href="#分块查找" class="headerlink" title="分块查找"></a>分块查找</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//索引表</span></span><br><span class="line"><span class="comment">//保存的每个一块的区间和 最大值</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    ElemType maxValue;</span><br><span class="line">    <span class="type">int</span> low,high;</span><br><span class="line">&#125;Index;</span><br></pre></td></tr></table></figure><p>用折半查找来查询 索引。</p><p>分为</p><ul><li>关键字等于target</li><li>关键字不等于target<ul><li>这个时候要看low对应的块。</li></ul></li></ul><p><strong>要用上面的那个折半查找的过程。来确定low的标</strong></p><p><img src="/images/image-20220413161310961.png"></p><p><strong>效率分析</strong><br>$$<br>n&#x3D;s\times b\总数量＝块数\times 块内元素数<br>$$<br>块数</p><p>+ </p><p><img src="/images/image-20220413161639596.png" alt="image-20220413161639596"></p><p>+ </p><p><img src="/images/image-20220413162318119.png" alt="image-20220413162318119"></p><h2 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    ElemType keys[<span class="number">4</span>];<span class="comment">//最多四个关键字</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> *child[<span class="number">5</span>];<span class="comment">//最多五个孩子</span></span><br><span class="line">    <span class="type">int</span> num;                <span class="comment">//节点中几个关键字</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示意图</p><p><img src="/images/image-20220413165414521.png" alt="image-20220413165414521"></p><p>为了保证查找效率，每个节点内关键字太少不太行。</p><p>规定m叉查找树，除了根节点</p><ul><li>$$<br>任何节点有 \lceil m&#x2F;2\rceil 个分叉，即 \lceil m&#x2F;2\rceil-1个关键字<br>$$</li></ul><p>同时</p><ul><li>要保证平衡 就是说任何一个结点的子树的高度要相同。</li></ul><p>B树 多路平衡查找树</p><ul><li>B树的阶：所有节点的孩子个数的最大值</li></ul><p>m阶B树满足以下条件</p><ul><li><p>每个结点至多有m棵子树，m-1个关键字</p></li><li><p>若<strong>根节点</strong>不是终端结点，则至少含有两个子树</p></li><li><p>$$<br>除根节点，，每个非叶子结点至少有，\lceil m&#x2F;2\rceil 个分叉，即 \lceil m&#x2F;2\rceil-1个关键字<br>$$</p></li><li><p>所有叶子节点出现在同一层次，并且不带信息。</p></li></ul><p>示意图</p><p>$$<br>  <br>$$</p><p><img src="/images/image-20220413171150017.png" alt="image-20220413171150017"></p><p>$$<br>P_0 是指针，P_{i-1}指向的结点小于K_i\qquad P_i指向的结点大于K_i<br>$$</p><p>对于m阶B树来说</p><p><strong>最小高度</strong><br>$$<br>每个结点是(m-1)个关键字，\times（1+m+m^2+\dots+m^{h-1}）这么多个结点\quad &#x3D;n\<br>n&#x3D;m^h-1<br>$$<br><strong>最大高度</strong><br>$$<br>第一层1个结点，第二层有两叉，后面每叉的节点里面有\lceil m&#x2F;2 \rceil-1个关键字。\lceil m&#x2F;2 \rceil叉<br>$$<br><img src="/images/image-20220413173233923.png" alt="image-20220413173233923"></p><p>n个关键字的B树有n+1个叶子节点。</p><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><p>关键字与存储地址直接相关</p><p>解决冲突：拉链法。示意图如下</p><p>查找失败的ASL有两种</p><ul><li>第一种是对应的地址没有数据<ul><li>这个时候是0或1（依真题而定）</li></ul></li><li>第二种是对应的数据有东西，不过找不到</li></ul><p>下面是查找成功的。</p><p><img src="/images/image-20220413192038300.png" alt="image-20220413192038300"></p><p>冲突越多，查找的效率越低，所以说要如何设计一个</p><p>冲突很少的哈希函数比较重要哈。</p><p><strong>装填因子</strong></p><p>也可以理解为查找失败的ASL</p><p>表中记录数&#x2F;散列表的长度</p><p><img src="/images/image-20220413192525031.png" alt="image-20220413192525031"></p><h3 id="一些常见的哈希函数法"><a href="#一些常见的哈希函数法" class="headerlink" title="一些常见的哈希函数法"></a>一些常见的哈希函数法</h3><ul><li>除留取余法<ul><li>找一个小于但接近散列表长度的质数</li></ul></li><li>直接取址法</li><li>平方取中法</li><li>数字分析法</li></ul><p>处理冲突的方法。</p><ul><li>拉链法<ul><li>上面的说了</li><li>又叫链接法，链地址法，把所有的“同义词”放在一个链表中、</li></ul></li><li>开放定址法</li></ul><p>开放 空闲地址的意思</p><p><img src="/images/image-20220413194238199.png" alt="image-20220413194238199"></p><p>i是第几次冲突。d是人为设计的增量常数</p><p>**看 括号里面是H(key) **</p><ul><li>线性探测法</li></ul><p>​</p><p>​</p><ul><li>平方探测法</li></ul><p>0 1 -1  4 -4  9  -9</p><p>强调一下负数是怎么取模的</p><p>(-3)&#x2F;27 &#x3D; 24</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;线性表&quot;&gt;&lt;a href=&quot;#线性表&quot; class=&quot;headerlink&quot; title=&quot;线性表&quot;&gt;&lt;/a&gt;线性表&lt;/h1&gt;&lt;p&gt;具有&lt;strong&gt;相同数据类型&lt;/strong&gt;的n个 数据元素的&lt;strong&gt;有限&lt;/strong&gt;序列。&lt;/p&gt;
&lt;p&gt;n为</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>data structure</title>
    <link href="http://example.com/2022/01/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://example.com/2022/01/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2022-01-10T14:24:57.926Z</published>
    <updated>2022-04-23T13:48:08.859Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><p>具有<strong>相同数据类型</strong>的n个 数据元素的<strong>有限</strong>序列。</p><p>n为表长，n&#x3D;0时线性表是空表</p><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231521706.png" alt="image-20220110221153030"></p><p><strong>linear list</strong></p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">InitList(&amp;L)</span><br><span class="line"></span><br><span class="line">DestoryList(&amp;L)</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">ListInsert(&amp;L,i,e)</span><br><span class="line"></span><br><span class="line">ListDelete(&amp;L,i,&amp;e)</span><br><span class="line"><span class="comment">//删除表L中第i个位置的元素，并用e返回删除元素的值</span></span><br><span class="line"></span><br><span class="line">LocateElem(L,e)</span><br><span class="line"><span class="comment">//按照值来进行查找</span></span><br><span class="line"></span><br><span class="line">GetElem(L,i)</span><br><span class="line"><span class="comment">//按位查找操作</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">//其他的</span></span><br><span class="line">Length(L)</span><br><span class="line">PrintList(L)</span><br><span class="line">Empty(L)</span><br></pre></td></tr></table></figure><p>对修改结果需要带回来，要加入对参数的引用  <strong>&amp;</strong></p><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><p>（用顺序存储来实现的 线性表）</p><p><strong>顺序存储</strong>：逻辑上相邻的元素，在物理位置上也相邻</p><p>一个整数  int    4B  4个字节</p><h4 id="顺序表的定义"><a href="#顺序表的定义" class="headerlink" title="顺序表的定义"></a>顺序表的定义</h4><h5 id="静态分配"><a href="#静态分配" class="headerlink" title="静态分配"></a>静态分配</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="type">int</span> data[MaxSize];</span><br><span class="line"><span class="type">int</span> Length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">initList</span><span class="params">(SqList&amp; L)</span> &#123;</span><br><span class="line">L.Length = <span class="number">0</span>;<span class="comment">//初始化 长度为0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MaxSize; i++)</span><br><span class="line">&#123;</span><br><span class="line">L.data[i] = i;</span><br><span class="line">L.Length++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>先规定了数组的大小，不能变化。</p><h5 id="动态分配"><a href="#动态分配" class="headerlink" title="动态分配"></a>动态分配</h5><p>​<strong>malloc</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L.data = (ElemType*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ElemType)*InitSize);</span><br></pre></td></tr></table></figure><p>申请一片连续存储空间，并返回一个指向内存首部的指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="type">int</span>* data;   <span class="comment">//指向动态分配的指针</span></span><br><span class="line"><span class="type">int</span> MaxSize;<span class="comment">//顺序表最大容量</span></span><br><span class="line"><span class="type">int</span> length;<span class="comment">//当前有数据元素的长度</span></span><br><span class="line">&#125;SeqList;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">initlist</span><span class="params">(SeqList&amp; l)</span> &#123;</span><br><span class="line">l.data = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * InitSize);</span><br><span class="line">l.length = <span class="number">0</span>;</span><br><span class="line">l.MaxSize = InitSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">IncreaseSize</span><span class="params">(SeqList&amp; L, <span class="type">int</span> len)</span> &#123;<span class="comment">//动态增加表的长度</span></span><br><span class="line"><span class="type">int</span>* p = L.data;</span><br><span class="line">L.data = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * (L.MaxSize + len));</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; L.length; i++)</span><br><span class="line">L.data[i] = p[i];</span><br><span class="line">L.MaxSize = L.MaxSize + len;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">SeqList L;</span><br><span class="line">initlist(L);</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">IncreaseSize(L, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul><li>随机访问 O（1）可以找到元素</li><li>插入移动元素不方便</li><li>存储密度高 ，每个节点只存储数据元素</li><li>拓展容量不方便</li></ul><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231521707.png" alt="image-20220111110822120"></p><h4 id="顺序表的插入删除"><a href="#顺序表的插入删除" class="headerlink" title="顺序表的插入删除"></a>顺序表的插入删除</h4><h5 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">ListInsert</span><span class="params">(sqlist&amp; L, <span class="type">int</span> i, <span class="type">int</span> e)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = L.length; j &gt;= i; j--)&#123;</span><br><span class="line">L.data[j] = L.data[j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">L.data[i - <span class="number">1</span>] = e;</span><br><span class="line">L.length++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//增加了健壮性   多了几个判断的操作 </span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">ListInsert</span><span class="params">(sqlist&amp; L, <span class="type">int</span> i, <span class="type">int</span> e)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;i||i&gt;L.length+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(L.length&gt;=MaxSize)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = L.length; j &gt;= i; j--)&#123;</span><br><span class="line">L.data[j] = L.data[j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">L.data[i - <span class="number">1</span>] = e;</span><br><span class="line">L.length++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最好情况 O（1）</p><p>最差情况O（n）</p><p>平均情况<br>$$<br>\frac{1}{n+1}*(1+2+…+n)&#x3D; \<br>\frac{(1+n)*n}{2}*\frac{1}{n+1}&#x3D;\<br>\frac{n}{2}<br>$$</p><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231521708.png" alt="image-20220111131809457"></p><h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">ListDelete</span><span class="params">(Sqlist &amp;L,<span class="type">int</span> i,<span class="type">int</span> &amp;e)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;L.length)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">e=L.data[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;L.length;j++)</span><br><span class="line">L.data[j<span class="number">-1</span>]=L.data[j];</span><br><span class="line">L.length--;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  e 用了引用</span></span><br></pre></td></tr></table></figure><p>最好情况 O(1)</p><p>最差情况O(n)</p><p>平均<br>$$<br>\frac{1}{n}*(1+2+…+n-1)&#x3D; \<br>\frac{(n-1)*n}{2}*\frac{1}{n}&#x3D;\<br>\frac{n-1}{2}<br>$$<br><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231521709.png" alt="image-20220111132307171"></p><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231520255.png" alt="image-20220111132336073"></p><h4 id="顺序表的查找"><a href="#顺序表的查找" class="headerlink" title="顺序表的查找"></a>顺序表的查找</h4><h5 id="按位查找"><a href="#按位查找" class="headerlink" title="按位查找"></a>按位查找</h5><p>静态分配</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ElemType <span class="title function_">GetElem</span><span class="params">(Sqlist L,<span class="type">int</span> i)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> L.data[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动态分配</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//是一样的</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="type">int</span> data[maxsize];</span><br><span class="line"><span class="type">int</span> length;</span><br><span class="line">&#125;sqlist;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="type">int</span>* data;   <span class="comment">//指向动态分配的指针</span></span><br><span class="line"><span class="type">int</span> MaxSize;<span class="comment">//顺序表最大容量</span></span><br><span class="line"><span class="type">int</span> length;<span class="comment">//当前有数据元素的长度</span></span><br><span class="line">&#125;SeqList;</span><br></pre></td></tr></table></figure><p>时间复杂度 O(1)</p><p>随机存取的特性，连续存放，类型一致</p><h5 id="按值查找"><a href="#按值查找" class="headerlink" title="按值查找"></a>按值查找</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">LocateElem</span><span class="params">(SeqList L,<span class="type">int</span> e)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)</span><br><span class="line"><span class="keyword">if</span>(L.data[i]==e)</span><br><span class="line"><span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查找的 时间复杂度</p><p>最好情况：O（1）</p><p>最差情况：O（n）</p><p>平均情况：<br>$$<br>\frac{1}{n}*(1+2+…+n)&#x3D; \<br>\frac{(n+1)*n}{2}*\frac{1}{n}&#x3D;\<br>\frac{n+1}{2}<br>$$<br><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231521710.png" alt="image-20220111133536860"></p><h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><ul><li>不要求大片空间 改变容量方便</li><li>不支持随机存取</li></ul><h4 id="单链表定义"><a href="#单链表定义" class="headerlink" title="单链表定义"></a>单链表定义</h4><p>typedef  &lt;数据类型&gt; &lt;别名&gt;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">Elemdata data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>  *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode,*LinkList;</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">Elemdata data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>  *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> <span class="title">LNode</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">LinkList</span>;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>不带头节点的单链表</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">InitList</span><span class="params">(LinkList &amp;L)</span>&#123;</span><br><span class="line">L = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//空表，暂时还没有任何节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>带头结点的单链表</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">InitList</span><span class="params">(LinkList &amp;L)</span>&#123;</span><br><span class="line">L=(LNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line"><span class="comment">//分配一个头节点</span></span><br><span class="line"><span class="keyword">if</span>(L==<span class="literal">NULL</span>)<span class="comment">//分配失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231521711.png" alt="image-20220111135118882"></p><p>总结</p><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231521712.png" alt="image-20220111135144982"></p><h3 id="链表的操作"><a href="#链表的操作" class="headerlink" title="链表的操作"></a>链表的操作</h3><h4 id="插入-1"><a href="#插入-1" class="headerlink" title="插入"></a>插入</h4><p><em>按照位置</em></p><p><strong>带头结点</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">ListInsert</span><span class="params">(LinkList &amp;L,<span class="type">int</span> i,ElemType e)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *p;</span><br><span class="line">    <span class="type">int</span> j=<span class="number">0</span>;<span class="comment">//此时p指向的链表中的第几项</span></span><br><span class="line">    p=L;    <span class="comment">//一开始指向头节点</span></span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;j&lt;i<span class="number">-1</span>)&#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;       <span class="comment">//整一个循环，使p指向第i-1个结点</span></span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>) <span class="comment">//i值不合法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *s = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    </span><br><span class="line">    s-&gt;data=e;</span><br><span class="line">    s-&gt;next=p-&gt;next;</span><br><span class="line">    p-&gt;next=s;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231521713.png" alt="image-20220111152734939"></p><p><strong>不带头节点的后插</strong></p><p>此时第一个节点是有数据的</p><p>要分情况</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i==<span class="number">1</span>)&#123;</span><br><span class="line">    LNode *s=(LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    s-&gt;data=e;</span><br><span class="line">    s-&gt;next=L;</span><br><span class="line">    L=s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    LNode *p;</span><br><span class="line">    <span class="type">int</span> j=<span class="number">1</span>;</span><br><span class="line">    p=L;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;j&lt;i<span class="number">-1</span>)&#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *s=(LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    </span><br><span class="line">    s-&gt;data=e;</span><br><span class="line">    s-&gt;next=p-&gt;next;</span><br><span class="line">    p-&gt;next=s;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>指定节点的前插操作</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">InsertPriorNode</span><span class="params">(LNode *p,ElemType e)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *s=(LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    s-&gt;next=p-&gt;next;</span><br><span class="line">    p-&gt;next=s;<span class="comment">//将新节点s连在p之后</span></span><br><span class="line">    s-&gt;data=p-&gt;data;  <span class="comment">//p原来的值赋给s</span></span><br><span class="line">    p-&gt;data=e;<span class="comment">//把要添加的值给p</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h4><p><strong>按照位序删除</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LinkDelete</span><span class="params">(LinkList &amp;L,<span class="type">int</span> i,ElemType &amp;e)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i&lt;<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *p;</span><br><span class="line">    <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">    p=L;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;j&lt;i<span class="number">-1</span>)&#123;</span><br><span class="line">        j++;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)   <span class="comment">//i值不合法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;next==<span class="literal">NULL</span>)  <span class="comment">//第i-1个结点之后没有节点了</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *q=p-&gt;next;</span><br><span class="line">    e=q-&gt;data;</span><br><span class="line">    p-&gt;next=q-&gt;next;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">free</span>(q)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>删除指定节点</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前提是 要删除的不是最后一个节点。</span></span><br><span class="line"><span class="comment">//否则就要从头开始求了</span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">DeleteNode</span><span class="params">(LNode *p)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *q=p-&gt;next;<span class="comment">//借助了一个中继节点</span></span><br><span class="line">    p-&gt;data=q-&gt;data;<span class="comment">//</span></span><br><span class="line">    p-&gt;next=q-&gt;next;<span class="comment">//把*q从链中断开</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">free</span>(q)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><p><strong>位置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">LNode *<span class="title function_">GetElem</span><span class="params">(LinkList L,<span class="type">int</span> i)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    LNode *p;</span><br><span class="line">    <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">    p=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; j&lt;i<span class="number">-1</span>)&#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>值</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LNode * <span class="title function_">LocateElem</span><span class="params">(LinkList L,ElemType e)</span>&#123;</span><br><span class="line">LNode *p = L-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; p-&gt;data!=e)</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="建立"><a href="#建立" class="headerlink" title="建立"></a>建立</h4><ul><li>初始化一个链表</li><li>每次取一个数据元素，插入到尾部或头部</li></ul><p><strong>尾插法</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">LinkList <span class="title function_">List_Tailinsert</span><span class="params">(LinkList &amp;L)</span>&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    L=(LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode)); <span class="comment">//建立头节点</span></span><br><span class="line">    LNode *s,*r=L;<span class="comment">//r为表尾指针</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123;</span><br><span class="line">        s=(LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">        </span><br><span class="line">        s-&gt;data=x;</span><br><span class="line">        r-&gt;next=s;</span><br><span class="line">        r=s;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    r-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>头插法</strong>(带头节点)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">LinkList <span class="title function_">List_HeadInsert</span><span class="params">(LinkList &amp;L)</span>&#123;</span><br><span class="line">    LNode *s;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    L=(LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123;</span><br><span class="line">    s=(LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">        s-&gt;data=x;</span><br><span class="line">        s-&gt;next=L-&gt;next;</span><br><span class="line">        L-&gt;next=s;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span>&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span> *<span class="title">prior</span>,*<span class="title">next</span>;</span></span><br><span class="line">&#125;DNode,*DLinkList;</span><br></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="**初始化 **"></a>**初始化 **</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">InitDLinkList</span><span class="params">(DLinkList &amp;L)</span>&#123;</span><br><span class="line">    L=(DNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DNode));</span><br><span class="line">    <span class="keyword">if</span>(L==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    L-&gt;prior=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    DLinkList L;</span><br><span class="line">    InitDLinkList(L);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231521714.png" alt="image-20220112123356508"></p><p><strong>p节点后插入s结点</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">InsertNextDNode</span><span class="params">(DNode *p,Dnode *s)</span>&#123;</span><br><span class="line">    s-&gt;next=p-&gt;next; <span class="comment">//</span></span><br><span class="line">    s-&gt;prior=p;</span><br><span class="line">    p-&gt;next-&gt;poior=s;</span><br><span class="line">    p-&gt;next=s</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> InsertNextDNode(DNode *p,Dnode *s)&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>||s==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    s-&gt;next=p-&gt;next; <span class="comment">//</span></span><br><span class="line">    <span class="keyword">if</span> (p-&gt;next!=<span class="literal">NULL</span>)<span class="comment">//如果p之后又有后继节点</span></span><br><span class="line">         p-&gt;next-&gt;poior=s;</span><br><span class="line">    </span><br><span class="line">    s-&gt;prior=p;</span><br><span class="line">    p-&gt;next=s;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231521715.png" alt="image-20220112131556592"></p><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231521716.png" alt="image-20220112132505297"></p><h3 id="删除-2"><a href="#删除-2" class="headerlink" title="删除"></a>删除</h3><p>删除p的后继节点</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">DeleteNextDNode</span><span class="params">(DNode *p)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>||p-&gt;next==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    DNode *q=p-&gt;next;</span><br><span class="line">    p-&gt;next=q-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(q-&gt;next!=<span class="literal">NULL</span>)<span class="comment">//  删的不是最后一个结点</span></span><br><span class="line">    q-&gt;next-&gt;poior=p;</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231521717.png" alt="image-20220112133313926"></p><h2 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h2><h3 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode,LinkList;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">InitLinkList</span><span class="params">(&amp;L)</span>&#123;</span><br><span class="line">    L=(LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    <span class="keyword">if</span>(L==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    L-&gt;next=L;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>循环双链表</strong></p><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231521718.png" alt="image-20220112134230784"></p><h2 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h2><p>分配一整片连续的内存空间，各个结点集中安置。</p><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231521719.png" alt="image-20220112134604670"></p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10 <span class="comment">//最大长度</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="type">int</span> next;   <span class="comment">//下一个元素的下标</span></span><br><span class="line">&#125;SLinkList[MaxSize];</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231521720.png" alt="image-20220112152155459"></p><p> 右边是 下一个的位置</p><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231521721.png" alt="image-20220112152614933"></p><h2 id="顺序表-amp-链表"><a href="#顺序表-amp-链表" class="headerlink" title="顺序表&amp;链表"></a>顺序表&amp;链表</h2><ul><li><p>都是线性表，线性结构</p></li><li><p>顺序表：顺序存储</p><ul><li>随机存取，密度高（只存数据），</li><li>要求一块连续的空间。</li></ul></li><li><p>链表：链式存储</p><ul><li>离散的小空间，分配方便</li><li>改变容量方便，不能随机存取，</li><li>有指针，存储密度低。</li></ul></li></ul><p><strong>操作</strong></p><ul><li>创建&amp;销毁<ul><li>顺序表：分配大片空间<ul><li>静态\动态</li></ul></li><li>链表：分配一个头节点\头指针</li></ul></li></ul><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231521722.png" alt="image-20220112153455037"></p><ul><li><p><strong>增删</strong>改<strong>查</strong></p></li><li><p>增</p><ul><li>顺序表：插入\删除时，所以元素都要移动O（n）</li><li>链表：只需要修改真正的结点O(n)</li></ul><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231521723.png" alt="image-20220112153823152"></p></li></ul><h1 id="栈-队列"><a href="#栈-队列" class="headerlink" title="栈 队列"></a>栈 队列</h1><p>  只允许在一端进行插入或删除操作的 <strong>线性表</strong></p><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>后进先出（LIFO）</p><h3 id="基本操作-1"><a href="#基本操作-1" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">InitStack(&amp;S) </span><br><span class="line">DestroyStack(&amp;L)</span><br><span class="line"></span><br><span class="line">Push(&amp;S,x)</span><br><span class="line">Pop(&amp;S,&amp;x)</span><br><span class="line">    </span><br><span class="line">GetTop(S,&amp;x)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>$$<br>n个不同的元素进栈，那么合法的出栈顺序\frac{1}{n+1}*C_{2n}^{n}<br>$$</p><h3 id="顺序栈"><a href="#顺序栈" class="headerlink" title="顺序栈"></a>顺序栈</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">ElemType data[MaxSize];</span><br><span class="line"><span class="type">int</span> top;</span><br><span class="line">&#125;Sqstack;</span><br></pre></td></tr></table></figure><h4 id="初始化-2"><a href="#初始化-2" class="headerlink" title="初始化"></a><strong>初始化</strong></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">InitStack</span><span class="params">(SqStack &amp;S)</span>&#123;</span><br><span class="line"><span class="type">int</span> top=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="进栈"><a href="#进栈" class="headerlink" title="进栈"></a><strong>进栈</strong></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">Push</span><span class="params">(SqStack &amp;S,ElemType e)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top==MaxSize<span class="number">-1</span>)<span class="comment">//栈满 报错</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">S.top++;           <span class="comment">//指针++</span></span><br><span class="line">S.data[S.top]=e;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231521724.png" alt="image-20220112161318695"></p><h4 id="出栈"><a href="#出栈" class="headerlink" title="出栈"></a><strong>出栈</strong></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">Pop</span><span class="params">(SqStack &amp;S,ElemType &amp;x)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S.top==<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    x=S.data[S.top];</span><br><span class="line">    S.top--;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231521725.png" alt="image-20220112161621264"></p><h4 id="读元素"><a href="#读元素" class="headerlink" title="读元素"></a>读元素</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">GetTop</span><span class="params">(SqStack S,ElemType &amp;x)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(S.top==<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">x=S.data[S.top];</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="共享栈"><a href="#共享栈" class="headerlink" title="共享栈"></a>共享栈</h4><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231521726.png" alt="image-20220112162137766"></p><h3 id="链栈"><a href="#链栈" class="headerlink" title="链栈"></a>链栈</h3><p>用链式存储方式整的栈</p><p><strong>定义</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;*LiStack;</span><br></pre></td></tr></table></figure><h4 id="进栈-1"><a href="#进栈-1" class="headerlink" title="进栈"></a>进栈</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">Pop</span><span class="params">(LiStack &amp;S,Elemtype x)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(S=<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LinkNode *q=(LiStack*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LiStack));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(q==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    q-&gt;data=x;</span><br><span class="line">    q-&gt;next=S-&gt;next;</span><br><span class="line">    s-&gt;next=q;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;  <span class="comment">//有头节点</span></span><br></pre></td></tr></table></figure><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>只允许在一端进行插入，在另一端删除的线性表</p><p>先进先出（FIFO）</p><p><strong>基本操作</strong></p><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231521727.png" alt="image-20220112164920856"></p><h3 id="顺序队列"><a href="#顺序队列" class="headerlink" title="顺序队列"></a>顺序队列</h3><h4 id="初始化-3"><a href="#初始化-3" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">ElemType data[MaxSize];</span><br><span class="line"><span class="type">int</span> front,rear;  <span class="comment">//队头指针和队尾指针</span></span><br><span class="line">&#125;SqQueue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitQueue</span><span class="params">(SqQueue &amp;Q)</span>&#123;</span><br><span class="line">    Q.rear=<span class="number">0</span>;</span><br><span class="line">    Q.front=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="入队"><a href="#入队" class="headerlink" title="入队"></a>入队</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">EnQueue</span><span class="params">(SqQueue &amp;Q,ElemType x)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>( (Q.rear+<span class="number">1</span>)%MaxSize == Q.front)<span class="comment">//队满</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">Q.data[Q.rear]=x;</span><br><span class="line">Q.rear=(Q.rear+<span class="number">1</span>)%MaxSize;   <span class="comment">//队尾指针加一取模</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="出队"><a href="#出队" class="headerlink" title="出队"></a>出队</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">DnQueue</span><span class="params">(SqQueue &amp;Q,ElemType &amp;x)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>( Q.rear == Q.front)<span class="comment">//对空</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">x=Q.data[Q.front];</span><br><span class="line">Q.front=(Q.front+<span class="number">1</span>)%MaxSize;   <span class="comment">//队尾指针加一取模</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算队列中数据</p><p>牺牲一个数据<br>$$<br>（rear+MaxSize-front）% MaxSize<br>$$<br><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231521728.png" alt="image-20220112185012050"></p><p><strong>方式二：</strong>结构体多了个  size</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">ElemType data[MaxSize];</span><br><span class="line"><span class="type">int</span> front,rear;</span><br><span class="line"><span class="type">int</span> size;  <span class="comment">//表示当前队列长度</span></span><br><span class="line">&#125;SeQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">ElemType data[MaxSize];</span><br><span class="line"><span class="type">int</span> front,rear;</span><br><span class="line"><span class="type">int</span> tag;  <span class="comment">//0表示当前删除成功，1表示当前插入成功</span></span><br><span class="line">&#125;SeQueue;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>方案三</strong> 加入tag</p><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231521729.png" alt="image-20220112185333098"></p><h3 id="链式队列"><a href="#链式队列" class="headerlink" title="链式队列"></a>链式队列</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LinkNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    LinkNode *front,*rear;</span><br><span class="line">&#125;LinkQueue;</span><br></pre></td></tr></table></figure><h3 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h3><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="括号匹配"><a href="#括号匹配" class="headerlink" title="括号匹配"></a>括号匹配</h3><p>从左往右 一次扫描</p><p>遇到左括号就 入栈，遇到右括号就弹出栈中的其中一个与之匹配</p><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231521730.png" alt="image-20220123213052021"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">bracketCheck</span><span class="params">(<span class="type">char</span> str[],<span class="type">int</span> length)</span>&#123;</span><br><span class="line">    SqlStack S;</span><br><span class="line">    InitStack(S);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;length;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">&quot;(&quot;</span>||str[i]==<span class="string">&quot;[]&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Push(S,str[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(Empty(S))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="type">char</span> topElem;</span><br><span class="line">            Pop(S,topElem);</span><br><span class="line">            <span class="keyword">if</span>(str[i]!=topElem)<span class="comment">//要用字符串相等的函数</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;    </span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Empty(S);</span><br><span class="line">    </span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="表达式求值"><a href="#表达式求值" class="headerlink" title="表达式求值"></a>表达式求值</h3><ul><li>运算符在操作符的位置 <ul><li>前缀、中缀、后缀</li></ul></li></ul><p>后缀：左优先</p><p>前缀：右优先</p><p><strong>计算</strong></p><p>栈实现后缀表达式</p><ul><li>从左往右依次扫描，直到扫描完所有的</li><li>扫描到操作数就压入栈，回到1，否则到3</li><li>扫描到运算符，弹出两个栈顶元素进行计算，运算结果压入栈，回到1</li></ul><p>栈实现前缀表达式</p><ul><li>从右往左依次扫描，直到扫描完所有的</li><li>扫描到操作数就压入栈，回到1，否则到3</li><li>扫描到运算符，弹出两个栈顶元素进行计算，运算结果压入栈，回到1</li></ul><p><strong>转化</strong></p><h3 id="函数递归"><a href="#函数递归" class="headerlink" title="函数递归"></a>函数递归</h3><h3 id="队列应用"><a href="#队列应用" class="headerlink" title="队列应用"></a>队列应用</h3><h1 id="串"><a href="#串" class="headerlink" title="串"></a>串</h1><p>字符串：由零个或多个字符组成的有限序列。</p><p>一般记作<br>$$<br>S&#x3D;’a_1a_2a_3···’<br>$$<br>从1开始</p><p><strong>基本操作</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">StrAssign(&amp;T,chars) <span class="comment">//赋值操作</span></span><br><span class="line">StrCopy(&amp;T,S)<span class="comment">//串S复制得到T</span></span><br><span class="line">StrEmpty(S)</span><br><span class="line">StrLength(S)</span><br><span class="line">ClearString(&amp;S)<span class="comment">//清空字符串</span></span><br><span class="line">DestoryString(&amp;S)<span class="comment">//销毁串，回收存储空间</span></span><br><span class="line">ConCat(&amp;T,S1,S2)<span class="comment">//串链接，由T返回S1，S2组成的新串</span></span><br><span class="line">    </span><br><span class="line">SubString(&amp;Sub,S,pos,len) <span class="comment">//求字串</span></span><br><span class="line">Index(S,T)<span class="comment">//看T在S的第一次出现的位置</span></span><br><span class="line"></span><br><span class="line">StrCompare(S,T)<span class="comment">//比较操作，字典排序</span></span><br></pre></td></tr></table></figure><h2 id="顺序存储"><a href="#顺序存储" class="headerlink" title="顺序存储"></a>顺序存储</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAXLEN 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> ch[MAXLEN];</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">&#125;SString;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>求字串</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">SubString</span><span class="params">(SString &amp;Sub,SString S,<span class="type">int</span> pos,<span class="type">int</span> len)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(pos+len<span class="number">-1</span>)&gt;S.length</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=pos;i&lt;pos+len<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        Sub.ch[i-pos+<span class="number">1</span>] = S.ch[i];</span><br><span class="line">    &#125;</span><br><span class="line">    Subs.len = len;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>比较大小</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">StrCompare</span><span class="params">(SString S,SSTring T)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=S.length &amp;&amp; i&lt;=T.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(S.ch[i]!=T.ch[i])</span><br><span class="line">            <span class="keyword">return</span> S.ch[i] - T.ch[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> S.length - T.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>定位</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Index</span><span class="params">(SString S,SString T)</span>&#123;</span><br><span class="line"><span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> n=StrLength(S);</span><br><span class="line">    <span class="type">int</span> m=StrLength(T);</span><br><span class="line">    SStringsub;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=n-m+<span class="number">1</span>)&#123;</span><br><span class="line">        SubString(sub,S,i,m);</span><br><span class="line">        <span class="keyword">if</span>(StrCompare(sub,T)!=<span class="number">0</span>)</span><br><span class="line">            ++i;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="匹配"><a href="#匹配" class="headerlink" title="匹配"></a>匹配</h2><h3 id="朴素模式匹配算法"><a href="#朴素模式匹配算法" class="headerlink" title="朴素模式匹配算法"></a>朴素模式匹配算法</h3><p>O(m*n)</p><p>匹配 n-m+1个 字串</p><p>一个个 比较</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Index</span><span class="params">(SString S,SString T)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">1</span>,j=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=S.length&amp;&amp;j&lt;=T.length)&#123;</span><br><span class="line">        <span class="keyword">if</span>(S.ch[i]==T.ch[j])</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            i=i-j+<span class="number">2</span>;</span><br><span class="line">            j=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j&gt;T.length)</span><br><span class="line">        <span class="keyword">return</span> i-T.length;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双index</p><p>退出条件，子串index大于其长度。</p><h3 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h3><p>O(m+n)</p><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231521731.png" alt="image-20220125103338627"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Index_KMP</span><span class="params">(SString S,SString T,<span class="type">int</span> next[])</span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">1</span>,j=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=S.length&amp;&amp;j&lt;=T.length)&#123;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">0</span>||S.ch[i]==T.ch[i])&#123;</span><br><span class="line">            ++i;++j;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            j=next[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j&gt;T.length)</span><br><span class="line">        <span class="keyword">return</span> i-T.length;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主子串指针 不回溯</p><p><strong>求next 数组</strong></p><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231521732.png" alt="image-20220407152220260"></p><p>get_next</p><p>伪代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">get_next</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">1</span>,j=<span class="number">0</span>;</span><br><span class="line">    next[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;s.length)&#123;</span><br><span class="line">        <span class="keyword">if</span>&#123;(j==<span class="number">0</span>||s[i]==s[j])&#123;</span><br><span class="line">            ++i;</span><br><span class="line">            ++j;</span><br><span class="line">            next[i]=j;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">           <span class="keyword">else</span>&#123;</span><br><span class="line">               j=next[j];</span><br><span class="line">           &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><h2 id="常考性质"><a href="#常考性质" class="headerlink" title="常考性质"></a>常考性质</h2><ul><li><p>$$<br>节点数&#x3D;总度数+1<br>$$</p></li><li><p>$$<br>度为m的树第i层最多有m^{(i-1)}个结点<br>$$</p></li><li><p>$$<br>高为h的m叉树最多有\frac{m^h-1}{m-1}个结点<br>$$</p></li><li><p>$$<br>具有n个结点的m叉树最小高度为\lceil log_m(n(m-1)+1) \rceil<br>$$</p></li></ul><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><ul><li>每个结点最多两个子树</li><li>左右子树不能颠倒</li><li>有序树</li></ul><h3 id="特殊二叉树"><a href="#特殊二叉树" class="headerlink" title="特殊二叉树"></a>特殊二叉树</h3><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231521733.png" alt="image-20220125150247498"></p><p>  <strong>二叉排序树</strong></p><ul><li>左子树上<strong>所有</strong>节点小于根节点</li><li>右子树上<strong>所有</strong>节点大于根节点</li><li>左右子树各是一课二叉排序树</li></ul><p><strong>平衡二叉树</strong></p><p>  树上任一结点的左子树和右子树的深度之差不超过1。</p><h3 id="常考性质-1"><a href="#常考性质-1" class="headerlink" title="常考性质"></a>常考性质</h3><ul><li><p>$$<br>n_0&#x3D;n2+1<br>$$</p><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231521734.png" alt="image-20220125162347279"></p></li><li><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231521735.png" alt="image-20220125180917113"></p></li></ul><h3 id="顺序存储-1"><a href="#顺序存储-1" class="headerlink" title="顺序存储"></a>顺序存储</h3><p><strong>完全二叉树</strong></p><ul><li><p>i 的左孩子 2i</p></li><li><p>i 的右孩子 2i+1</p></li><li><p>i的父节点</p></li></ul><h3 id="链式存储"><a href="#链式存储" class="headerlink" title="链式存储"></a>链式存储</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span>&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">parent</span>;</span></span><br><span class="line">&#125;BiTNode,*BiTree;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231521736.png" alt="image-20220125193816761"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一棵空树</span></span><br><span class="line">BiTree root = <span class="literal">NULL</span>;</span><br><span class="line">root = (BiTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">root-&gt;data = &#123;<span class="number">1</span>&#125;;</span><br><span class="line">root-rchild = <span class="literal">NULL</span>;</span><br><span class="line">root-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">BiTNode *p =(BiTNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">p-&gt;data = &#123;<span class="number">2</span>&#125;</span><br><span class="line">p-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">p-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">root-&gt;lchild = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><h3 id="先中后遍历"><a href="#先中后遍历" class="headerlink" title="先中后遍历"></a>先中后遍历</h3><p><strong>先序</strong>：根左右</p><p><strong>中序</strong>：左根右</p><p><strong>后序</strong>：左右根</p><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231521737.png" alt="image-20220126212548102"></p><ul><li>先序<ul><li>A B D G E C F</li></ul></li><li>中序<ul><li>D G B E A F C</li></ul></li><li>后序<ul><li>G D E B F C A</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span>&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span></span><br><span class="line">&#125;BiTNode,*BiTree;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PreOrder</span><span class="params">(BiTree T)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        visit(T);</span><br><span class="line">        PreOrder(T-&gt;lchild);</span><br><span class="line">        PreOrder(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>从你的全世界路过法</strong></p><p>不全的补全，然后看路过的次数</p><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231521738.png" alt="image-20220126213738125"></p><p><strong>由遍历构造二叉树</strong></p><p>每个单独的都有歧义，</p><p>层次、先序、后序 任意一种 加上  <strong>中序</strong> 都可以完整确认一个 二叉树</p><h3 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a>层次遍历</h3><p>辅助队列</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LevelOrder</span><span class="params">(BiTree T)</span>&#123;</span><br><span class="line">LinkQueue Q;</span><br><span class="line">    InitQueue(Q);</span><br><span class="line">    BiTree p;</span><br><span class="line">    EnQueue(Q,T);</span><br><span class="line">    <span class="keyword">while</span>(!Empty(Q))&#123;</span><br><span class="line">        DeQueue(Q,p);</span><br><span class="line">        visit(p);</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;lchild!=<span class="literal">NULL</span>);</span><br><span class="line">        EnQueue(Q,p-&gt;lchild);</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;rchild!=<span class="literal">NULL</span>);</span><br><span class="line">        EnQueue(Q,p-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span></span><br><span class="line">&#125;BiTNode,*BiTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>&#123;</span></span><br><span class="line">    BiTNode *data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LinkNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    LInkNode *front,*rear;</span><br><span class="line">&#125;LinkQueue;</span><br></pre></td></tr></table></figure><h2 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h2><p>问题</p><ul><li>得从根结点开始遍历</li><li></li></ul><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231521739.png" alt="image-20220128170945148"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ThreadNode</span>&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ThreadNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span></span><br><span class="line">    <span class="type">int</span> ltag,rtag;</span><br><span class="line">&#125;ThreadNode,*ThreadTree;</span><br><span class="line">tag == <span class="number">0</span>;  <span class="comment">//指针指向孩子</span></span><br><span class="line">tag == <span class="number">1</span>;  <span class="comment">//指针指向线索（前驱or后继）</span></span><br></pre></td></tr></table></figure><ul><li>中序线索二叉树中找中序后继</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//找到 以p为根的子树中 第一个被中序遍历的结点</span></span><br><span class="line">ThreadNode *<span class="title function_">Firstnode</span><span class="params">(ThreadNode *p)</span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(p-&gt;ltag==<span class="number">0</span>)</span><br><span class="line">        p=p-&gt;lchild;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 找到p的后继节点</span></span><br><span class="line">ThreadNode *<span class="title function_">Nextnode</span><span class="params">(ThreadNode *p)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;rtag==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> Firstnode(p-&gt;rchild);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> p-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inorder</span><span class="params">(ThreadNode *T)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(ThreadNode *p=Firstnode(T);p!=<span class="literal">NULL</span>;p=Nextnode(p))</span><br><span class="line">    &#123;</span><br><span class="line">        visit(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找前驱，进行逆向中序遍历</p><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231521741.png" alt="image-20220128214012217"></p><h2 id="树の存储结构"><a href="#树の存储结构" class="headerlink" title="树の存储结构"></a>树の存储结构</h2><p><strong>双亲表示法</strong></p><p>每个节点保存指向父亲的“指针”</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_TREE_SIZE 100  <span class="comment">//最多节点数</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    ElemType data;     </span><br><span class="line">    <span class="type">int</span> parent;       <span class="comment">//双亲位置域</span></span><br><span class="line">&#125;PTNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    PTNode nodes[MAX_TREE_SIZE];</span><br><span class="line">    <span class="type">int</span> n;  <span class="comment">//节点数</span></span><br><span class="line">&#125;PTree;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231521742.png" alt="image-20220129200919399"></p><ul><li>优点：查询指定节点的双亲更方便</li><li>缺点：指定节点的孩子指针只能从头遍历</li></ul><p><strong>孩子表示法</strong></p><p>顺序存储各个结点，每个节点保存孩子的链表头指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CTNode</span>&#123;</span></span><br><span class="line"><span class="type">int</span> child;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> *<span class="title">CTNode</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">CTNode</span> *<span class="title">firstChild</span>;</span></span><br><span class="line">&#125;CTBox;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    Ct</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="树の遍历"><a href="#树の遍历" class="headerlink" title="树の遍历"></a>树の遍历</h2><h3 id="先序"><a href="#先序" class="headerlink" title="先序"></a>先序</h3><h2 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h2><p>中序遍历二叉排序树，可以得到有序的序列。</p><p>左孩子节点小于父节点，右孩子结点大于父亲结点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">BSTnode</span>&#123;</span><br><span class="line">    <span class="type">int</span> key;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">BSTnode</span> *lchild,*rchild;</span><br><span class="line">&#125;BSTnode,*BSTree;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="查找-1"><a href="#查找-1" class="headerlink" title="查找"></a>查找</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//直接查找 空间复杂度 O(1)</span></span><br><span class="line"><span class="function">BSTnode* <span class="title">BST_Search</span><span class="params">(BSTree T,<span class="type">int</span> key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(key!=T-&gt;key)&#123;</span><br><span class="line">        <span class="keyword">if</span>(key&gt;T-&gt;key)  <span class="comment">//大于，换右子节点</span></span><br><span class="line">            T=T-&gt;rchild;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            T=T-&gt;lchild;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//递归 空间复杂度 O(h)</span></span><br><span class="line"><span class="function">BSTnode *<span class="title">BST_Search</span><span class="params">(BSTree T,<span class="type">int</span> key)</span></span>&#123;</span><br><span class="line">    <span class="comment">//判断递归退出条件</span></span><br><span class="line">    <span class="keyword">if</span>(T==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(key==T-&gt;key)</span><br><span class="line">        <span class="keyword">return</span> T;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(key &gt; T-&gt;key)  <span class="comment">//大于，换右子节点</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">BST_Search</span>(T-&gt;rchild,key);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">BST_Search</span>(T-&gt;lchild,key);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入-2"><a href="#插入-2" class="headerlink" title="插入"></a>插入</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">BST_Insert</span><span class="params">(BSTree &amp;T,<span class="type">int</span> key)</span></span>&#123;</span><br><span class="line">    <span class="comment">//找到了应该插入的地方</span></span><br><span class="line">    <span class="keyword">if</span>(T==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        T=(BSTree)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(BStree));</span><br><span class="line">        T-&gt;rchild=<span class="literal">NULL</span>;</span><br><span class="line">        T-&gt;lchild=NUll;</span><br><span class="line">        T-&gt;key = key;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(key==T-&gt;key)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(key &gt; T-&gt;key)  <span class="comment">//大于，换右子节点</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">BST_Insert</span>(T-&gt;rchild,key);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">BST_Insert</span>(T-&gt;lchild,key);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">create_BSTree</span><span class="params">(BSTree &amp;T,<span class="type">int</span> a[],<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    BStree T = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(i&lt;n)&#123;</span><br><span class="line">        <span class="built_in">BST_Insert</span>(T,a[i]);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/img/202204231633502.png" alt="image-20220423163306317"></p><h3 id="删除结点"><a href="#删除结点" class="headerlink" title="删除结点"></a>删除结点</h3><ul><li>叶子结点，直接删</li><li>只有左子树or右子树</li><li>都有<ul><li>被删除结点的中序遍历的后继结点来顶上。</li><li>或者是直接前驱，就是下面这个图里的30</li></ul></li></ul><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/img/202204231637708.png" alt="image-20220423163722569"></p><h2 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h2><p>任意节点的左子树，右子树高度差不超过1</p><p>平衡因子&#x3D;左子树高度-右子树高度</p><p>所以说平衡因子只可能是 -1，0，1</p><p>找到第一个不满足平衡因子的，<code>最小不平衡子树</code></p><p>四个类型</p><ul><li>LL：在A的左孩子的左子树中插入导致不平衡</li></ul><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/img/202204231704973.png" alt="image-20220423170420835"></p><p>进行一个<strong>右旋</strong>，把B提上来，然后BR去当A的左孩子</p><ul><li>RR ：A的右孩子的右子树插入</li></ul><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/img/202204231708959.png" alt="image-20220423170852820"></p><p>进行一个<strong>左旋</strong>，A的右孩子变成B的左孩子，B的左孩子变成A</p><ul><li>LR</li></ul><p>先左旋，再右旋</p><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/img/202204231714484.png" alt="image-20220423171420337"></p><ul><li>RL</li></ul><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/img/202204231715660.png" alt="image-20220423171533515"></p><p>先右旋，再左旋。</p><h3 id="效率分析"><a href="#效率分析" class="headerlink" title="效率分析"></a>效率分析</h3><p>n个节点，看看高度是多少</p><p>h_{i}表示深度为i的平衡树的最少的节点数<br>$$<br>h_0 &#x3D;0 \qquad h_1&#x3D;1\qquad h_2&#x3D;2 \qquad<br>$$</p><p>$$<br>h_i&#x3D;h_{i-1}+h_{i-2}+1<br>$$</p><h2 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h2><ul><li>节点的带权路径长度</li></ul><p>从树的根到该节点的路径长度(经过了几条边) * 该结点的值</p><ul><li>树的带权路径长度</li></ul><p>所有叶子节点 带权路径之和</p><p>哈夫曼树，最优二叉树</p><p>给定n个带权叶子节点，得到的二叉树的最小的带权路径</p><p><code>每次都拿权值最小的两个进行结合</code></p><p><strong>前缀</strong>问题</p><p>前缀编码：没有一个编码是另一个编码的前缀</p><h1 id="查找-2"><a href="#查找-2" class="headerlink" title="查找"></a>查找</h1><h2 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h2><p>查找长度</p><p>查找运算中，需要对比关键字的次数称为查找长度</p><p>ASL Average Search Length</p><p>所有查找过程中进行关键字的比较次数。</p><p>分查找成功和查找失败</p><h2 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h2><h2 id="折半查找"><a href="#折半查找" class="headerlink" title="折半查找"></a>折半查找</h2><p>有序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> right = L.length<span class="number">-1</span>;</span><br><span class="line"><span class="type">int</span> mid=(left+right)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span>(left&lt;=right)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(target&lt;L[mid])&#123;</span><br><span class="line">        right = mid<span class="number">-1</span>;</span><br><span class="line">        mid = (right+left)/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(target&gt;L[mid])&#123;</span><br><span class="line">        left = mid+<span class="number">1</span>;</span><br><span class="line">        mid = (right+left)/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(target==L[mid])</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231521743.png" alt="image-20220413154541862"></p><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231521744.png" alt="image-20220413154729954"></p><p>当前low和high有奇数个元素，mid分割后左右节点个数一样</p><p>low和high有偶数个元素，mid分割后，左边比右边少一个。</p><ul><li>折半查找的判定树是 平衡二叉树</li><li>平衡二叉排序树</li></ul><p>折半查找的ASL</p><h2 id="分块查找"><a href="#分块查找" class="headerlink" title="分块查找"></a>分块查找</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//索引表</span></span><br><span class="line"><span class="comment">//保存的每个一块的区间和 最大值</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    ElemType maxValue;</span><br><span class="line">    <span class="type">int</span> low,high;</span><br><span class="line">&#125;Index;</span><br></pre></td></tr></table></figure><p>用折半查找来查询 索引。</p><p>分为</p><ul><li>关键字等于target</li><li>关键字不等于target<ul><li>这个时候要看low对应的块。</li></ul></li></ul><p><strong>要用上面的那个折半查找的过程。来确定low的标</strong></p><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231521745.png"></p><p><strong>效率分析</strong><br>$$<br>n&#x3D;s\times b\总数量＝块数\times 块内元素数<br>$$<br>块数</p><p>+ </p><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231521746.png" alt="image-20220413161639596"></p><p>+ </p><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231521747.png" alt="image-20220413162318119"></p><h2 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    ElemType keys[<span class="number">4</span>];<span class="comment">//最多四个关键字</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> *child[<span class="number">5</span>];<span class="comment">//最多五个孩子</span></span><br><span class="line">    <span class="type">int</span> num;                <span class="comment">//节点中几个关键字</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示意图</p><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231521748.png" alt="image-20220413165414521"></p><p>为了保证查找效率，每个节点内关键字太少不太行。</p><p>规定m叉查找树，除了根节点</p><ul><li>$$<br>任何节点有 \lceil m&#x2F;2\rceil 个分叉，即 \lceil m&#x2F;2\rceil-1个关键字<br>$$</li></ul><p>同时</p><ul><li>要保证平衡 就是说任何一个结点的子树的高度要相同。</li></ul><p>B树 多路平衡查找树</p><ul><li>B树的阶：所有节点的孩子个数的最大值</li></ul><p>m阶B树满足以下条件</p><ul><li><p>每个结点至多有m棵子树，m-1个关键字</p></li><li><p>若<strong>根节点</strong>不是终端结点，则至少含有两个子树</p></li><li><p>$$<br>除根节点，，每个非叶子结点至少有，\lceil m&#x2F;2\rceil 个分叉，即 \lceil m&#x2F;2\rceil-1个关键字<br>$$</p></li><li><p>所有叶子节点出现在同一层次，并且不带信息。</p></li></ul><p>示意图</p><p>$$<br>  <br>$$</p><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231521749.png" alt="image-20220413171150017"></p><p>$$<br>P_0 是指针，P_{i-1}指向的结点小于K_i\qquad P_i指向的结点大于K_i<br>$$</p><p>对于m阶B树来说</p><p><strong>最小高度</strong><br>$$<br>每个结点是(m-1)个关键字，\times（1+m+m^2+\dots+m^{h-1}）这么多个结点\quad &#x3D;n\<br>n&#x3D;m^h-1<br>$$<br><strong>最大高度</strong><br>$$<br>第一层1个结点，第二层有两叉，后面每叉的节点里面有\lceil m&#x2F;2 \rceil-1个关键字。\lceil m&#x2F;2 \rceil叉<br>$$<br><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231521750.png" alt="image-20220413173233923"></p><p>n个关键字的B树有n+1个叶子节点。</p><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><p>关键字与存储地址直接相关</p><p>解决冲突：拉链法。示意图如下</p><p>查找失败的ASL有两种</p><ul><li>第一种是对应的地址没有数据<ul><li>这个时候是0或1（依真题而定）</li></ul></li><li>第二种是对应的数据有东西，不过找不到</li></ul><p>下面是查找成功的。</p><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231521751.png" alt="image-20220413192038300"></p><p>冲突越多，查找的效率越低，所以说要如何设计一个</p><p>冲突很少的哈希函数比较重要哈。</p><p><strong>装填因子</strong></p><p>也可以理解为查找失败的ASL</p><p>表中记录数&#x2F;散列表的长度</p><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231521752.png" alt="image-20220413192525031"></p><h3 id="一些常见的哈希函数法"><a href="#一些常见的哈希函数法" class="headerlink" title="一些常见的哈希函数法"></a>一些常见的哈希函数法</h3><ul><li>除留取余法<ul><li>找一个小于但接近散列表长度的质数</li></ul></li><li>直接取址法</li><li>平方取中法</li><li>数字分析法</li></ul><p>处理冲突的方法。</p><ul><li>拉链法<ul><li>上面的说了</li><li>又叫链接法，链地址法，把所有的“同义词”放在一个链表中、</li></ul></li><li>开放定址法</li></ul><p>开放 空闲地址的意思</p><p><img src="https://gitee.com/demo_oo/figure-picgo/raw/master/202204231521753.png" alt="image-20220413194238199"></p><p>i是第几次冲突。d是人为设计的增量常数</p><p>**看 括号里面是H(key) **</p><ul><li>线性探测法</li></ul><p>​</p><p>​</p><ul><li>平方探测法</li></ul><p>0 1 -1  4 -4  9  -9</p><p>强调一下负数是怎么取模的</p><p>(-3)&#x2F;27 &#x3D; 24</p><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><p>稳定性：相对位置是否改变</p><p>分类</p><ul><li>内部排序：数据都在内存中<ul><li>时间复杂度、空间复杂度</li></ul></li><li>外部排序：数据太多，无法放入内存<ul><li>读写磁盘、指标</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;

&lt;h1 id=&quot;线性表&quot;&gt;&lt;a href=&quot;#线性表&quot; class=&quot;headerlink&quot; title=&quot;线性表&quot;&gt;&lt;/a&gt;线性表&lt;/h1&gt;&lt;p&gt;具有&lt;strong&gt;相同数据类型&lt;/s</summary>
      
    
    
    
    
  </entry>
  
</feed>
